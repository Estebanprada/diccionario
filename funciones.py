# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qiq4ysdar955htxpn3XjVzbAD0wC3FWN
"""

#En esta parte del código se inicializa un diccionario llamado calificaciones con dos claves y sus respectivos valores
calificaciones = {
    'nombre': 'Sandra',
    'notafinal': 5.0
}
#En esta parte del código el diccionario calificaciones se reinicializa con diferentes valores ahora las claves son los nombres de los estudiantes ('Sandra', 'Adriana', 'Mauricio' y 'Jose') y los valores son las calificaciones correspondientes (5.0, 5.0, 4.5 y 2.5 respectivamente).
calificaciones = {
    'Sandra': 5.0,
    'Adriana': 5.0,
    'Mauricio': 4.5,
    'Jose': 2.5
}
#En esta parte se utiliza un bucle for para iterar sobre los elementos del diccionario calificaciones, calificaciones.items() devuelve pares clave-valor del diccionario dentro del bucle, i representa la clave (nombre del estudiante) y j representa el valor (calificación del estudiante).
for i, j in calificaciones.items():
    print(i, j)

#En esta parte del código se imprime el mensaje "Técnicas por clave" luego, se utiliza un bucle for para iterar sobre las claves del diccionario calificaciones usando el método keys()
print("Técnicas por clave")
for i in calificaciones.keys():
    print(i)
#Aquí se imprime el mensaje "Iterar por valor" luego utiliza un bucle for para iterar sobre los valores del diccionario calificaciones usando el método values()
print("Iterar por valor")
for j in calificaciones.values():
    print(j)
#En esta parte se tienen dos listas nombres y edades se utiliza la función zip para combinar las dos listas en pares (n representa el nombre y e representa la edad) y luego se imprime un mensaje formateado para cada par.
nombres = ['Maria', 'Sebastian', 'Ana']
edades = ['18', '25', '30']
for n, e in zip(nombres, edades):
    print('Tú nombre es {0} y tu edad {1}.'.format(n, e))



#En esta línea se utiliza una expresión de diccionario para crear un nuevo diccionario llamado dicaleatorio la expresión {x: x**2 for x in (2, 4, 6)}
dicaleatorio = {x: x**2 for x in (2, 4, 6)}
#En esta línea el programa imprime el diccionario dicaleatorio que se creó anteriormente
print(dicaleatorio)

#En esta línea, se imprime el mensaje "Números en reversa" en la consola
print("Números en reversa")
#En estas líneas, se utiliza un bucle for para iterar sobre una secuencia de números generados por range(1, 10, 2) La función reversed() se utiliza para invertir la secuencia generada por range(1, 10, 2)
for i in reversed(range(1, 10, 2)):
    print(i)

#En esta línea, se utiliza la palabra clave del para eliminar la entrada correspondiente a la clave 'Rosa' del diccionario calificaciones.
del calificaciones['Rosa']
#En estas líneas, se utiliza un bucle for para iterar sobre los elementos del diccionario calificaciones usando el método items() en cada iteración, el bucle asigna la clave a la variable i y el valor a la variable j
for i, j in calificaciones.items():
    print(i, j)

# Definición de la función 'compra' que toma tres argumentos la función crea un diccionario con las claves 'marca', 'cantidad' y 'valor', El valor de 'valor' se multiplica por 'cantidad' para obtener el valor total de la compra.
def compra(marca, cantidad, valor=2500000):
    return dict(
        marca=marca,
        cantidad=cantidad,
        valor=valor * cantidad
    )

# Llama a la función 'compra' con los argumentos especificados ('AMD' como marca y 3 como cantidad) como el valor de 'valor' no se proporciona en la llamada, se utilizará el valor predeterminado 2500000.
print(f' lo comprado fue: {compra("AMD", 3)}')

# Definición de la función 'lista' que toma dos argumentos: 'arg' y 'result' (con valor predeterminado None) la función agrega 'arg' a la lista 'result' y luego imprime la lista resultante.
def lista(arg, result=None):
    # Verifica si 'result' es None, en cuyo caso crea una nueva lista vacía.
    if result is None:
        result = []
    # Agrega 'arg' a la lista 'result'.
    result.append(arg)
    # Imprime la lista resultante.
    print(result)
# La función imprimirá la lista que contiene solo la palabra 'domingo'.
lista('domingo', [])

#Ejercicio de funcion
def lista(arg, result=[]):
    result.append(arg)
    print(result)
dias_de_semana = ['lunes', 'martes', 'miércoles', 'jueves', 'viernes', 'sábado']
lista('domingo', dias_de_semana)

# Definición de la función 'listalimpia' que toma dos argumentos: 'arg' y 'result' (con valor predeterminado None).
def listalimpia(arg, result=None):
    # Verifica si 'result' es None, en cuyo caso crea una nueva lista vacía.
    if result is None:
        result = []
    # Agrega 'arg' a la lista 'result'.
    result.append(arg)
    # Imprime la lista resultante.
    print(result)
# La función creará una nueva lista y agregará "a" a esa lista, luego imprimirá la lista ["a"].
listalimpia("a")
# La función creará otra lista y agregará "b" a esa lista, luego imprimirá la lista ["b"].
listalimpia("b")